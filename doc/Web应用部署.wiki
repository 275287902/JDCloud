 = Web应用部署 =

== 从浏览器缓存问题讲起 ==

对于单应用型网页，假设入口为 index.html, 它引用一些js与css。（部分js会动态加载其它js文件）
当其中的一些文件更新后，看到的现象：
- 有时主页无法刷新，什么时候会刷新未知，但一般一天内会刷新过来。
- 有时会出现主页和js有的刷新，有的未刷新的情况，出现冲突。
- 微信中css极难刷新，会持续多天无法刷新。

经分析：
- 标准的浏览器一般能自动刷新过来（如chrome），有些则必须通过手工刷新才能更新加载（如IE，手机安卓浏览器）
- 对于微信浏览器，以及通过Cordova/PhoneGap/IntelXDK包装网页应用后生成的安卓应用（核心是WebView控件），其缓存策略不明，常常是无法刷新。主要规律有：
  - 对于主页面（如index.html），再次访问时微信基本不重复远程获取。
  - 如果主页面未变，则基本不会再远程取它引用的其它js/css文件。
  - 如果主页面及某些js近期发生过变化，再次访问时，微信或Webview会增加重新远程取它的可能性，但不是每次都获取，策略不明。

我们希望的结果是：
- 在微信中，或Webview控件构成的应用中，一旦远程有文件发生变化，应立即获取到。

=== 解决方法 ===

- 对于主页文件(html入口文件)，通过修改Web服务器配置设置禁止缓存解决。如在Apache配置中设置HTTP头"Cache-Control: no-cache"来解决。
- 对于主页或其它js中引用的文件，通过在发布时对引用资源加随机参数解决。如 index.html 引用 main.js，在发布时我们用 main.js?v=333 来要求客户端重新取文件。

注意：
- "no-cache"并不意味着没有缓存，只是建议客户端每次去服务器取（一般会带If-None-Match/If-Modified-Since等参数在http头中），成熟的Web服务器如Apache一般会检查文件，无更新则返回"304 Not Modified" （以及Etag, Last-Modified等属性在HTTP头中），这样客户端收到304代码中使用缓存。
- 真正完全禁用缓存可用"no-store"值。如对api.php访问后一般会返回这个参数。
- 通过HTTP head中的meta标签如 `<meta http-equiv="Cache-Control" content="no-cache" />` 理论上应与设置HTTP头相同，但试验对微信浏览器或Webview无效.
- html5的manifest离线存储解决方案经测试在手机上行为不太确定（如有时多次才能刷新过来，微信浏览器支持似乎也有问题），且各浏览器支持程度不同，不建议现在使用。

==== 解决主页文件缓存 ====

在Apache的配置文件中设置目录的AllowOverride All权限，允许目录使用.htaccess自定义规则：

{{{
<Directory "/alidata/www/default/cheguanjia/">
	Options FollowSymLinks
	AllowOverride All
	
	Order allow,deny
	Allow from all
#    Require all granted
</Directory>
}}}

(新版本的apache可以用Require语句替代上两句)

对于想要禁用缓存的目录（例如移动客户端目录 `m2` 下），可以添加配置文件 .htaccess：
{{{
<FilesMatch "(\.html|\/)$">
	#Header set Cache-Control "max-age=604800"
	Header set Cache-Control "no-cache"
</FilesMatch>
}}}

注意：成熟的Web服务器一般都支持文件版本（通过ETag等）检查，即浏览器请求的文件如果没有变化，则不会传输文件。
因而，设置"no-cache"并不意味着客户端每次都要重新到服务器取文件，而是要求浏览器每次都去服务器检查文件是否需要更新。

==== 解决关联文件缓存 ====

对所有的易变资源, 引用时加个标识如`__HASH__`

{{{
html中：
<script src="main.js"></script>
-->
<script src="main.js?__HASH__"></script>

JS中：

loadScript("cordova/cordova.js"); 
-->
loadScript("cordova/cordova.js?__HASH__"); 
}}}

通过编译工具以上最终生成
{{{
<script src="main.js?v=321f2a"></script>

(__HASH__被改成文件的sha1代码后6位)
}}}

以上修改风格称为“覆盖式发布”。如果要使用“非覆盖式发布”，编译工具可生成：
{{{
<script src="main_321f2a.js"></script>
}}}

== Web应用编译及部署 ==

=== 需求 ===

编译工具需求：
- 解决文件缓存问题，自动替换`__HASH__`部分
- 合并与压缩(minify) js/css等文件

部署工具：
- 可上传至ftp。
- 可手工选择上传哪些文件，未修改的内容不上传
- 可提示哪些文件需要上传，以便手工操作。

=== 设计 ===

编译工具webcc
{{{
webcc {src-folder} -o {web-folder} 
}}}

*[参数]*

src-folder:: 使用git管理的源代码目录，我们用xeyc-sys/server
web-folder:: 使用git管理的实际web目录，我们用xeyc-sys-web, 它与ftp上的相应目录应保持一致。

*[工作原理]*

webcc做以下工作：

- 加载{src-folder}下的配置文件webcc.conf.php
- 如果定义了$FILES（一个数组，每项为一个正则式）, 则只处理匹配的文件；否则处理所有 git管理的文件。一般设置该项只为调试个别文件。
- 加载 $RULES，它指定对每个匹配的文件采取何种操作。

它结合git工作，比如取要处理的所有文件，用 `git ls-files`
取某版本以来的文件，用 `git diff rev1 head --name-status`
更新完成后，输出VERSION_SRC文件。

*[配置文件]*

{src-folder}下的webcc.conf.php为配置文件。

示例：
{{{
<?php

$COPY_EXCLUDE = [
	'm1/*',
	'wap/*'
];

/*
$FILES = [
	'm2/index.html'
];
 */

$RULES = [
	'm/*.html' => 'HASH', // 对m目录下所有html文件进行HASH处理
	'm/app_fw.js' => 'HASH',  对 m/app_fw.js 文件进行HASH处理

	// 指定脚本，其中先做了js文件归并，再用jsmin工具做压缩; $TARGET表示最终文件。
	'm2/cordova/cordova.js' => '
cd m2/cordova
cat cordova.js cordova_plugins.js \
	plugins/cordova-plugin-splashscreen/www/splashscreen.js \
	plugins/org.apache.cordova.camera/www/Camera.js \
	plugins/org.apache.cordova.camera/www/CameraConstants.js \
	plugins/org.apache.cordova.camera/www/CameraPopoverHandle.js \
	plugins/org.apache.cordova.camera/www/CameraPopoverOptions.js \
	| jsmin > $TARGET ',
];
?>
}}}

解读：

- `$COPY_EXCLUDE` 中定义了在m1/ wap/目录下的文件不做复制处理。
- `$FILES` 明确定义了要处理的文件，一般只用于调试；这里已注释掉。
- `$RULES` 里面定义了几条规则，满足正则式则执行之后的步骤。步骤可以是一个数组（表示多步，依次处理）或一个字符串（只有一步）。每一步可以定义：
 - "HASH": 将`__HASH__` 标识换为实际文件的hash值。对html文件，还可根据WEBCC_BEGIN等标识做文件归并。
 - shell脚本块。注意，当前目录为{src-folder}; 且可以用变量 $TARGET 表示最终文件。
- 没有匹配$RULES的文件，采用COPY行为，即 将{src-folder}下的文件复制到{web-folder}。除非在`$COPY_EXCLUDE` 中指定。

*[HASH处理规则]*

将 `__HASH__` 标识换为实际文件的hash值。对html文件，还可根据WEBCC_BEGIN等标识做文件归并。

例如： m2/index.html中:
{{{
	<script src="../m/app_fw.js?__HASH__"></script>
}}}
将会替换为
{{{
	<script src="../m/app_fw.js?v=3a4bac"></script>
}}}
webcc在找文件时，自动以当前文件 (m2/index.html)所在目录(即m2目录)作为相对目录去找。如果目录不正确，可用 `__HASH__,{dir}` 方式指定正确目录.

例如，在 m/app_fw.js 中：
{{{
	loadScript("cordova-ios/cordova.js?__HASH__,m2");  // 缺省webcc以 m/app_fw.js 所在目录即 "m/" 来找文件，而这里指定了目录为 "m2/", 所以webcc会查找文件 "m2/cordova-ios/cordova.js".
}}}
 
可以在html文件中定义了归并规则，例如文件 m2/index.html 中定义

{{{
<!-- WEBCC_BEGIN -->
		<script src="../m/common.js"></script>
		<script src="../m/app_fw.js"></script>
		<script src="../m/app.js"></script>
<!-- WEBCC_USE_THIS
		<script src="../m/app.min.js?__HASH__"></script>
WEBCC_END -->
}}}

这表示：
- WEBCC_BEGIN行到WEBCC_USE_THIS行中间的部分将删除，而WEBCC_USE_THIS行到WEBCC_END行中间的部分保留。处理后如下：
{{{
		<script src="../m/app.min.js?v=3a3345"></script>
}}}
 通过注释技巧，使得测试时 WEBCC_USE_THIS 中的内容实际被注释掉，因而使用的是归并前的版本，而归并后该注释被打开，从而使用新文件 app.min.js。
- 如果没有 WEBCC_USE_THIS 行，则 WEBCC_BEGIN到WEBCC_END中间的部分都将删除。
- 对于新文件的生成，可以定义生成规则如：
{{{
$RULES = [
	'm/lib-app.min.js' => ['
		// 第一步，先归并 common.js等几个文件，并通过jsmin进行压缩 
		'cd m
cat common.js app_fw.js app.js | jsmin > $TARGET',     

		// 第二步，再对合并的文件中使用 `__HASH__`的部分进行处理
		'HASH'   
	]
];

注意：

- 文件匹配及脚本中的路径分隔一律用"/"而不是"\"
- 脚本最终通过sh执行，不要写成bat脚本。

}}}

=== 网站发布步骤 ===

工具：
- git (版本管理)
- php/webcc (生成web发布目录)
- FileZilla (ftp手工上传工具)
- bash (Linux命令解析器，Windows系统中一般在git工具包中已包含)
- curl (ftp自动上传工具，一般在git工具包中已包含)

准备：
- 已配置好webcc.conf.php.
- 假定项目名为`jdcloud`, 那么在同一级创建一个发布目录名称为`jdcloud-online`，用git进行初始化。它将对应线上版本。
 {{{
mkdir jdcloud-online
cd jdcloud-online
git init
 }}}
- 配置服务器上的ftp帐号，然后配置项目根目录下的 build_web.sh。其中"OUT_DIR"为发布代码库的路径。
 
发布步骤：
- 进入项目目录, 打开git bash，运行命令
 {{{
build_web.sh
 }}}
- 根据提示确认修改的文件并上传线上。

注意：
- 如果出错，解决错误后用Filezilla手工上传修改的文件，或上传整个文件夹。

== 附录 ==

推荐：
- 前端工程与rails中的发布工具：http://www.zhihu.com/question/20790576

